{"ast":null,"code":"const Spotify = {\n  accessToken: '',\n  getAccessToken() {\n    if (this.accessToken) {\n      return this.accessToken;\n    }\n\n    // Check if the access token is in the URL\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      this.accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      // Clear the access token from the URL after it expires\n      window.setTimeout(() => {\n        this.accessToken = '';\n      }, expiresIn * 1000);\n\n      // Clear the URL parameters\n      window.history.pushState('Access Token', null, '/');\n      return this.accessToken;\n    } else {\n      // Redirect the user to the Spotify authorization page\n      const clientId = '6502ca3c645d42428afcdf33527dc802';\n      const redirectUri = 'http://localhost:3000/callback'; // Replace with your redirect URI\n\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n    }\n  },\n  // Use the access token to make Spotify API requests\n  async search(term) {\n    const accessToken = this.getAccessToken();\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        // Process the response data\n        return jsonResponse;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["Spotify","accessToken","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","clientId","redirectUri","search","term","response","fetch","headers","Authorization","ok","jsonResponse","json","error","console","log"],"sources":["C:/Users/ipdes/OneDrive/Desktop/coding stuff/jammming/src/components/Spotify.js"],"sourcesContent":["const Spotify = {\r\n    accessToken: '',\r\n  \r\n    getAccessToken() {\r\n      if (this.accessToken) {\r\n        return this.accessToken;\r\n      }\r\n  \r\n      // Check if the access token is in the URL\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n      if (accessTokenMatch && expiresInMatch) {\r\n        this.accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n  \r\n        // Clear the access token from the URL after it expires\r\n        window.setTimeout(() => {\r\n          this.accessToken = '';\r\n        }, expiresIn * 1000);\r\n  \r\n        // Clear the URL parameters\r\n        window.history.pushState('Access Token', null, '/');\r\n  \r\n        return this.accessToken;\r\n      } else {\r\n        // Redirect the user to the Spotify authorization page\r\n        const clientId = '6502ca3c645d42428afcdf33527dc802';\r\n        const redirectUri = 'http://localhost:3000/callback'; // Replace with your redirect URI\r\n  \r\n        window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      }\r\n    },\r\n  \r\n    // Use the access token to make Spotify API requests\r\n    async search(term) {\r\n      const accessToken = this.getAccessToken();\r\n  \r\n      try {\r\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n          }\r\n        });\r\n  \r\n        if (response.ok) {\r\n          const jsonResponse = await response.json();\r\n          // Process the response data\r\n          return jsonResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default Spotify;\r\n  "],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACZC,WAAW,EAAE,EAAE;EAEfC,cAAcA,CAAA,EAAG;IACf,IAAI,IAAI,CAACD,WAAW,EAAE;MACpB,OAAO,IAAI,CAACA,WAAW;IACzB;;IAEA;IACA,MAAME,gBAAgB,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IAC3E,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IAEvE,IAAIJ,gBAAgB,IAAIK,cAAc,EAAE;MACtC,IAAI,CAACP,WAAW,GAAGE,gBAAgB,CAAC,CAAC,CAAC;MACtC,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC;;MAE3C;MACAJ,MAAM,CAACO,UAAU,CAAC,MAAM;QACtB,IAAI,CAACV,WAAW,GAAG,EAAE;MACvB,CAAC,EAAEQ,SAAS,GAAG,IAAI,CAAC;;MAEpB;MACAL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MAEnD,OAAO,IAAI,CAACZ,WAAW;IACzB,CAAC,MAAM;MACL;MACA,MAAMa,QAAQ,GAAG,kCAAkC;MACnD,MAAMC,WAAW,GAAG,gCAAgC,CAAC,CAAC;;MAEtDX,MAAM,CAACC,QAAQ,GAAI,oDAAmDS,QAAS,kEAAiEC,WAAY,EAAC;IAC/J;EACF,CAAC;EAED;EACA,MAAMC,MAAMA,CAACC,IAAI,EAAE;IACjB,MAAMhB,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IAEzC,IAAI;MACF,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDF,IAAK,EAAC,EAAE;QACrFG,OAAO,EAAE;UACPC,aAAa,EAAG,UAASpB,WAAY;QACvC;MACF,CAAC,CAAC;MAEF,IAAIiB,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAC1C;QACA,OAAOD,YAAY;MACrB;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF;AACF,CAAC;AAED,eAAezB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}